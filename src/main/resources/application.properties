spring.application.name=atm-api
spring.main.web-application-type=reactive
# src/main/resources/application.properties

# ---
# Configurações do Banco de Dados MySQL no Railway
# ---
# SUBSTITUA ESTES VALORES PELOS SEUS DO RAILWAY!
# A URL pode ser como: jdbc:mysql://containers-us-west-119.railway.app:5432/railway?useSSL=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://@yamanote.proxy.rlwy.net:47570/MTC?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=wkqkYvIORotgtYrcciZJpfJdaFNQzcvL

# ---
# Configurações do JPA (Java Persistence API) e Hibernate
# 'update' é para desenvolvimento: o Spring vai criar/atualizar a tabela 'users' no seu DB do Railway.
# ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# ---
# Configuração da Porta do Servidor da API para desenvolvimento local
# Sua API vai rodar no seu computador na porta 8080.
# ---
server.port=8080

# ---
# Configurações de CORS (Cross-Origin Resource Sharing)
# ESSENCIAL para que seu frontend se comunique com sua API.
# ---

# Habilita o CORS para toda a sua aplicação Spring Boot.
spring.web.cors.enabled=true

# Define quais *origens* (domínios/endereços) têm permissão para acessar sua API.
# '*' significa que QUALQUER origem pode acessar. ISSO É ÓTIMO PARA DESENVOLVIMENTO/TESTES.
# ATENÇÃO CRÍTICA: Em PRODUÇÃO, você **DEVE** mudar '*' para os domínios específicos do seu frontend (ex: http://seuapp.com, https://seuapp.com).
spring.web.cors.allowed-origins=*

# Define quais *métodos HTTP* são permitidos nas requisições CORS.
# GET (ler), POST (criar), PUT (atualizar), DELETE (apagar) e OPTIONS (pré-verificação do navegador).
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# Define quais *cabeçalhos HTTP* podem ser enviados nas requisições CORS.
# '*' permite todos os cabeçalhos. Isso é importante para o cabeçalho 'Authorization' que usaremos para tokens JWT.
spring.web.cors.allowed-headers=*

# Permite que o navegador inclua credenciais (como cookies ou o token JWT no cabeçalho Authorization)
# em requisições CORS. Fundamental para autenticação.
spring.web.cors.allow-credentials=true

# Tempo máximo (em segundos) que a resposta de pré-verificação CORS pode ser armazenada em cache pelo navegador.
# Evita que o navegador faça a pré-verificação (OPTIONS) para cada requisição.
spring.web.cors.max-age=3600

spring.main.web-application-type=servlet